[{"path":"/articles/hydrographr.html","id":"system-requirements","dir":"Articles","previous_headings":"","what":"System requirements","title":"Getting started with hydrographr","text":"work smoothly hydrographr package, GRASS GIS, GDAL, pktools need installed. Note: One major advantages package can aslo handle large data efficiently. use thehydrographr package read e.g. large raster files R. Instead files get processed background using GRASS GIS, GDAL, pktools within Linux environment output gets read R. Processing large files often makes server inevitable servers Linux common operating system. Therefore, hydrographr optimized Linux operating systems. However, also implemented way use within Rstudio Windows. use hydrographr Windows additional software needs installed (see Windows system setup). Installation guidelines different operating systems: Linux Windows macOS","code":""},{"path":"/articles/hydrographr.html","id":"loading-hydrographr","dir":"Articles","previous_headings":"","what":"Loading hydrographr","title":"Getting started with hydrographr","text":"can install hydrographr GitHub repository. install R package yet, install remotes::install_github(). start exploring package load hydrographr.","code":"# If the package remotes is not installed run first: install.packages(\"remotes\")  remotes::install_github(\"glowabio/hydrographr\") library(hydrographr)"},{"path":"/articles/hydrographr.html","id":"hydrographr-tutorial","dir":"Articles","previous_headings":"","what":"hydrographr tutorial","title":"Getting started with hydrographr","text":"--get-started tutorial show … test dataset hydrographr includes …..","code":""},{"path":"/articles/linux_system_setup.html","id":"installation-of-the-required-gis-tools","dir":"Articles","previous_headings":"","what":"Installation of the required GIS tools","title":"Setting up the package requirements on Linux","text":"installed GIS tools, please, install using hydrographr. use Ubuntu can copy-paste commands . use another Linux distribution, please, see linked software webpage installation instruction. Add Ubuntugis repository First, add “Ubuntugis” Personal Package Archive (PPA) system’s software sources able install GIS tools available . Next, need tell system pull latest list software archive knows , including PPA just added: Now ready install GDAL, pktools GRASS GIS. Copy paste commands console follow instructions install tools. GDAL GDAL translator library raster vector geospatial data formats comes variety useful command line utilities data translation processing. information check GDAL website. pktools Pktools suite command line utilities image processing remote sensing applications written C++. information check pktools website. GRASS GIS GRASS GIS powerful raster, vector, geospatial processing engine including tools terrain ecosystem modeling, hydrology processing satellite aerial imagery. detailed installation instructions check GRASS GIS users wiki GRASS GIS website. GRASS GIS addons Copy-paste commands install required addons GRASS GIS.","code":"# Add the Ubuntugis PPA sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable # Update the packages list sudo apt update # Install GDAL sudo apt install gdal-bin python3-gdal # Install pktools sudo apt install pktools # Install GRASS GIS sudo apt-get install grass grass-core grass-dev grass-gui grass-doc sudo apt install make  # Install GRASS GIS addons export GRASSEXEC=\"grass --exec\" $GRASSEXEC  g.extension  extension=r.stream.distance $GRASSEXEC  g.extension  extension=r.stream.order $GRASSEXEC  g.extension  extension=r.stream.snap $GRASSEXEC  g.extension  extension=r.stream.basins"},{"path":"/articles/windows_system_setup.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Setting up the package requirements on Windows","text":"Make sure least 4 GB free disk space. need administrator privileges Windows. must running Windows 10 version 2004 higher Windows 11, otherwise WSL available.","code":""},{"path":"/articles/windows_system_setup.html","id":"installation-of-the-windows-subsystem-for-linux-with-ubuntu","dir":"Articles","previous_headings":"","what":"Installation of the Windows Subsystem for Linux with Ubuntu","title":"Setting up the package requirements on Windows","text":"Open Windows Command Prompt (cmd.exe) administrator mode clicking Start button typing “cmd” search bar.right-click “Command Prompt” select “Run Administrator” highlight result arrow keys press Ctrl+Shift+Enter open command prompt administrative privileges. Enter wsl --install enable features necessary run WSL also directly install Ubuntu distribution Linux, default option WSL. installation complete, restart machine. open “Start” menu click “Ubuntu” open Ubuntu console. Please note Ubuntu get installed automatically, can alternatively visit Windows store (https://aka.ms/wslstore), search Ubuntu, install restart. first time open Ubuntu via “Start” menu prompted create username password Linux distribution. default user account administrator Ubuntu. purpose guideline use hydrographr, can pick name want. Please note whilst entering password, nothing appear screen won’t see typing, completely normal. Window automatically update Linux distribution. update upgrade packages Ubuntu, please copy paste command Ubuntu terminal enter password. done regularly basis. details installation WSL see . details setting username password see .","code":"# Enable the features necessary to run WSL and  # install the Ubuntu distribution of Linux.  wsl --install  #> Installing: Virtual Machine Platform #> Virtual Machine Platform has been installed. #> Installing: Windows Subsystem for Linux #> Windows Subsystem for Linux has been installed. #> Downloading: WSL Kernel #> Installing: WSL Kernel #> WSL Kernel has been installed. #> Downloading: Ubuntu #> The requested operation is successful. Changes will not be effective until the system is rebooted. #> Installing, this may take a few minutes... #> Please create a default UNIX user account. The username does not need to match your Windows username. #> For more information visit: https://aka.ms/wslusers #> Enter new UNIX username: hydrographr #> New password: #> Retype new password: #> passwd: password updated successfully #> Installation successful! #> To run a command as administrator (user \"root\"), use \"sudo <command>\". #> See \"man sudo_root\" for details. # Update and upgrade packages on Ubuntu sudo apt update && sudo apt upgrade"},{"path":"/articles/windows_system_setup.html","id":"installation-of-the-required-gis-tools-on-the-wsl","dir":"Articles","previous_headings":"","what":"Installation of the required GIS tools on the WSL","title":"Setting up the package requirements on Windows","text":"Next, need install required GIS tools WSL Ubuntu system. can use Ubuntu terminal, PowerShell Windows Command Prompt start installation. use PowerShell Windows Command Prompt use command wsl enter WSL first, exit go back Windows OS installation GIS tools. Add Ubuntugis repository First, add “Ubuntugis” Personal Package Archive (PPA) system’s software sources able install GIS tools available . Next, need tell system pull latest list software archive knows , including PPA just added: Now ready install GDAL, pktools GRASS GIS. Copy paste commands console follow instructions install tools. GDAL GDAL translator library raster vector geospatial data formats comes variety useful command line utilities data translation processing. information check GDAL website. pktools Pktools suite command line utilities image processing remote sensing applications written C++. information check pktools website. GRASS GIS GRASS GIS powerful raster, vector, geospatial processing engine including tools terrain ecosystem modeling, hydrology processing satellite aerial imagery. detailed installation instructions check GRASS GIS users wiki GRASS GIS website. GRASS GIS addons Copy-paste commands install required addons GRASS GIS.","code":"# Add the Ubuntugis PPA sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable # Update the packages list sudo apt update # Install GDAL sudo apt install gdal-bin python3-gdal # Install pktools sudo apt install pktools # Install GRASS GIS sudo apt-get install grass grass-core grass-dev grass-gui grass-doc sudo apt install make  # Install GRASS GIS addons export GRASSEXEC=\"grass --exec\" $GRASSEXEC  g.extension  extension=r.stream.distance $GRASSEXEC  g.extension  extension=r.stream.order $GRASSEXEC  g.extension  extension=r.stream.snap $GRASSEXEC  g.extension  extension=r.stream.basins"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maria Üblacker. Author, maintainer. Afroditi Grigoropoulou. Author. Jaime Garcia Marquez. Author. Yusdiel Torres Cambas. Author. Christoph Schürz. Author. Mathieu Floury. Author. Thomas Tomiczek. Author. Vanessa Bremerich. Author. Sami Domisch. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Üblacker M, Grigoropoulou , Garcia Marquez J, Torres Cambas Y, Schürz C, Floury M, Tomiczek T, Bremerich V, Domisch S (2022). hydrographr: Working Hydrography90m Data R. R package version 0.1.9001, https://glowabio.github.io/hydrographr/.","code":"@Manual{,   title = {hydrographr: Working with Hydrography90m Data in R},   author = {Maria Üblacker and Afroditi Grigoropoulou and Jaime {Garcia Marquez} and Yusdiel {Torres Cambas} and Christoph Schürz and Mathieu Floury and Thomas Tomiczek and Vanessa Bremerich and Sami Domisch},   year = {2022},   note = {R package version 0.1.9001},   url = {https://glowabio.github.io/hydrographr/}, }"},{"path":"/index.html","id":"hydrographr-","dir":"","previous_headings":"","what":"Working with Hydrography90m Data in R","title":"Working with Hydrography90m Data in R","text":"hydrographr provides collection R function wrappers GDAL GRASS-GIS functions efficiently work Hydrography90m spatial data. package currently development. useful functions made available time .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Working with Hydrography90m Data in R","text":"package currently developed invite users test functions report issues well feature requests.","code":"install.packages(\"remotes\") remotes::install_github(\"glowabio/hydrographr\") library(hydrographr)"},{"path":"/reference/check_tiles_filesize.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the size of single files. It is called and inherits arguments by the function 'download_tiles()' — check_tiles_filesize","title":"Checks the size of single files. It is called and inherits arguments by the function 'download_tiles()' — check_tiles_filesize","text":"Checks size single files. called inherits arguments function 'download_tiles()'","code":""},{"path":"/reference/check_tiles_filesize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the size of single files. It is called and inherits arguments by the function 'download_tiles()' — check_tiles_filesize","text":"","code":"check_tiles_filesize(   variable,   filetype = \"tif\",   tile_id = NULL,   reg_unit_id = NULL,   global = FALSE,   valid_varnames,   valid_tile_ids,   valid_filetypes,   file_size_table_sep )"},{"path":"/reference/check_tiles_filesize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the size of single files. It is called and inherits arguments by the function 'download_tiles()' — check_tiles_filesize","text":"variable vector variable names (character) filetype format requested file (\"tif\" \"gpkg\") tile_id id requested tile (character) reg_unit_id id requested regional unit (character) global global file downloaded . TRUE/FALSE, FALSE default valid_varnames valid names files available download (inherited 'download_tiles()') valid_tile_ids valid ids tiles available download (inherited 'download_tiles()') valid_filetypes valid file types files available download (inherited 'download_tiles()') file_size_table_sep lookup table file sizes (inherited 'download_tiles()')","code":""},{"path":"/reference/check_wsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if WSL and Ubuntu is installed on Windows — check_wsl","title":"Check if WSL and Ubuntu is installed on Windows — check_wsl","text":"Check WSL Ubuntu installed Windows","code":""},{"path":"/reference/check_wsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if WSL and Ubuntu is installed on Windows — check_wsl","text":"","code":"check_wsl()"},{"path":"/reference/crop_to_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"crop_to_extent — crop_to_extent","title":"crop_to_extent — crop_to_extent","text":"Crop raster .tif polygon border line vector layer (cutline source) provided, otherwise bounding box provided (xmin, ymin, xmax, ymax coordinates spatial object extract  bounding box), raster cropped extent bounding box.  least cutline source (vector_path) bounding box (bound_box)  must provided. rcrop_read = TRUE (default), outputs .tif  (saved output_path) SpatRaster (terra package) object,  otherwise rcrop_read = FALSE, .tif file output.","code":""},{"path":"/reference/crop_to_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"crop_to_extent — crop_to_extent","text":"","code":"crop_to_extent(   raster_path,   vector_path = NULL,   bound_box = NULL,   output_path,   rcrop_read = TRUE )"},{"path":"/reference/crop_to_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"crop_to_extent — crop_to_extent","text":"raster_path Path raster .tif layer vector_path Path vector layer used cutline data source bound_box coordinates corner bounding box (xmin, ymin, xmax, ymax) SpatRaster, SpatVector, spatial object. output_path Path raster .tif output rcrop_read TRUE cropped raster .tif layer gets read R. TRUE set default.","code":""},{"path":"/reference/crop_to_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"crop_to_extent — crop_to_extent","text":".tif raster file SpatRaster object, .tif raster file rcrop_read = FALSE","code":""},{"path":"/reference/download_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads multiple files from Nimbus by calling the function download_tiles_base in a loop. — download_tiles","title":"Downloads multiple files from Nimbus by calling the function download_tiles_base in a loop. — download_tiles","text":"Downloads multiple files Nimbus calling function download_tiles_base loop.","code":""},{"path":"/reference/download_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads multiple files from Nimbus by calling the function download_tiles_base in a loop. — download_tiles","text":"","code":"download_tiles(   variable,   filetype = \"tif\",   tile_id = NULL,   reg_unit_id = NULL,   global = FALSE,   download_path = \".\" )"},{"path":"/reference/download_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads multiple files from Nimbus by calling the function download_tiles_base in a loop. — download_tiles","text":"variable vector variable names (character) filetype format requested file (\"tif\" \"gpkg\") tile_id id requested tile (character) reg_unit_id id requested regional unit (character) global global file downloaded . TRUE/FALSE, FALSE default download_path path files downloaded","code":""},{"path":"/reference/download_tiles_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads a single file from https://public.igb-berlin.de/index.php/s/agciopgzXjWswF4?path=\nIt is called and inherits arguments by the function 'download_tiles()'. — download_tiles_base","title":"Downloads a single file from https://public.igb-berlin.de/index.php/s/agciopgzXjWswF4?path=\nIt is called and inherits arguments by the function 'download_tiles()'. — download_tiles_base","text":"Downloads single file https://public.igb-berlin.de/index.php/s/agciopgzXjWswF4?path= called inherits arguments function 'download_tiles()'.","code":""},{"path":"/reference/download_tiles_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads a single file from https://public.igb-berlin.de/index.php/s/agciopgzXjWswF4?path=\nIt is called and inherits arguments by the function 'download_tiles()'. — download_tiles_base","text":"","code":"download_tiles_base(   variable,   filetype = \"tif\",   tile_id = NULL,   reg_unit_id = NULL,   global = FALSE,   download_path = \".\",   valid_varnames,   valid_tile_ids,   valid_filetypes,   file_size_table_sep,   nimbus_path )"},{"path":"/reference/download_tiles_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads a single file from https://public.igb-berlin.de/index.php/s/agciopgzXjWswF4?path=\nIt is called and inherits arguments by the function 'download_tiles()'. — download_tiles_base","text":"variable vector variable names (character) filetype format requested file (\"tif\" \"gpkg\") tile_id id requested tile (character) reg_unit_id id requested regional unit (character) global global file downloaded . TRUE/FALSE, FALSE default download_path path files downloaded valid_varnames valid names files available download (inherited 'download_tiles()') valid_tile_ids valid ids tiles available download (inherited 'download_tiles()') valid_filetypes valid file types files available download (inherited 'download_tiles()') file_size_table_sep lookup table file sizes (inherited 'download_tiles()') nimbus_path path home download folder Nimbus (inherited 'download_tiles()')","code":""},{"path":"/reference/extract_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds sub-catchment and/or basin IDs to a dataframe of points — extract_ids","title":"Adds sub-catchment and/or basin IDs to a dataframe of points — extract_ids","text":"Adds sub-catchment /basin IDs dataframe points","code":""},{"path":"/reference/extract_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds sub-catchment and/or basin IDs to a dataframe of points — extract_ids","text":"","code":"extract_ids(   data,   lon = character(0),   lat = character(0),   subcatchment_path = NULL,   basin_path = NULL,   quiet = TRUE )"},{"path":"/reference/extract_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds sub-catchment and/or basin IDs to a dataframe of points — extract_ids","text":"data Data.frame lat/lon columns lon Name longitude column (WGS 84) lat Name latitude column (WGS 84) subcatchment_path Full path sub-catchment ID .tif layer basin_path Full path basin ID .tif layer quiet FLASE, process printed","code":""},{"path":"/reference/fix_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix path for WSL on Windows — fix_path","title":"Fix path for WSL on Windows — fix_path","text":"Fix path WSL Windows","code":""},{"path":"/reference/fix_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix path for WSL on Windows — fix_path","text":"","code":"fix_path(path)"},{"path":"/reference/fix_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix path for WSL on Windows — fix_path","text":"path Full Windows path.","code":""},{"path":"/reference/get_catchment_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Get catchment from graph — get_catchment_graph","title":"Get catchment from graph — get_catchment_graph","text":"Subset network graph extracting upstream sub-catchments, .e. drainage basin, one multiple stream segments. function return either one data.tables graph objects inout stream segment.","code":""},{"path":"/reference/get_catchment_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get catchment from graph — get_catchment_graph","text":"","code":"get_catchment_graph(   g,   segmentID = NULL,   outlet = F,   mode = NULL,   graph = F,   n_cores = 1,   maxsize = 1500 )"},{"path":"/reference/get_catchment_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get catchment from graph — get_catchment_graph","text":"g directed graph (igraph object). segmentID Optional. stream segment sub-catchments IDs delineate upstream drainage area. Can single ID vector multiple IDs (c(ID1, ID2, ID3, ...). empty, outlets used segment IDs (outlet=TRUE). Note can browse entire network online https://geo.igb-berlin.de/maps/351/view left hand side, select \"Stream segment ID\"  layer click map get ID. outlet Logical. TRUE, outlets given network graph used additional input segmentIDs. Outlets identified internally stream segments downstream donnected segment. mode Can either \"\", \"\" \"\". \"\" delineate upstream catchment, \"\" delineates downstream catchment (segments reachable given input segment), \"\" . graph Logical. TRUE output new graph list new graphs original attributes, FALSE (default), output new data.table, list data.tables. List objects named segmentIDs. n_cores Optional. Specify number CPUs internal parallelization case multiple stream segments / outlets. Defaults 1. Setting higher number might slower end, data provided CPU (worker) can take time. maxsize Optional. Specify maximum size data passed parallel backend MB. Defaults 1500 (1.5 GB). Consider higher value large study areas (one 20°x20° tile).","code":""},{"path":"/reference/get_os.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the operating system.\nThe function was written by Will Lowe and was copied from here:\nhttps://conjugateprior.org/2015/06/identifying-the-os-from-r/ — get_os","title":"Identify the operating system.\nThe function was written by Will Lowe and was copied from here:\nhttps://conjugateprior.org/2015/06/identifying-the-os-from-r/ — get_os","text":"Identify operating system. function written Lowe copied : https://conjugateprior.org/2015/06/identifying--os--r/","code":""},{"path":"/reference/get_os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the operating system.\nThe function was written by Will Lowe and was copied from here:\nhttps://conjugateprior.org/2015/06/identifying-the-os-from-r/ — get_os","text":"","code":"get_os()"},{"path":"/reference/get_regional_unit_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifies the ids of the regional units in which the given points are located. Input is a point data frame. — get_regional_unit_id","title":"Identifies the ids of the regional units in which the given points are located. Input is a point data frame. — get_regional_unit_id","text":"Identifies ids regional units given points located. Input point data frame.","code":""},{"path":"/reference/get_regional_unit_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifies the ids of the regional units in which the given points are located. Input is a point data frame. — get_regional_unit_id","text":"","code":"get_regional_unit_id(data, lon, lat, quiet = TRUE)"},{"path":"/reference/get_regional_unit_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifies the ids of the regional units in which the given points are located. Input is a point data frame. — get_regional_unit_id","text":"data data.frame lat lon columns lon Name longitude column character string lat Name latitude column character string","code":""},{"path":"/reference/get_tile_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifies the ids of the tiles in which the given points are located. Input is a point data frame. — get_tile_id","title":"Identifies the ids of the tiles in which the given points are located. Input is a point data frame. — get_tile_id","text":"Identifies ids tiles given points located. Input point data frame.","code":""},{"path":"/reference/get_tile_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifies the ids of the tiles in which the given points are located. Input is a point data frame. — get_tile_id","text":"","code":"get_tile_id(data, lon, lat)"},{"path":"/reference/get_tile_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifies the ids of the tiles in which the given points are located. Input is a point data frame. — get_tile_id","text":"data data.frame lat lon columns lon Name longitude column lat Name latitude column","code":""},{"path":"/reference/make_sh_exec.html","id":null,"dir":"Reference","previous_headings":"","what":"Make bash scripts executable — make_sh_exec","title":"Make bash scripts executable — make_sh_exec","text":"Make bash scripts executable","code":""},{"path":"/reference/make_sh_exec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make bash scripts executable — make_sh_exec","text":"","code":"make_sh_exec()"},{"path":"/reference/merge_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"merge_tiles — merge_tiles","title":"merge_tiles — merge_tiles","text":"Merge multiple raster spatial vector objects disk  form new raster spatial vector object larger spatial extent. least raster .tif spatial vector geopackage file must provided.  rraster`_`read = TRUE (default), outputs .tif (saved output`_`path) SpatRaster (terra package) object,  otherwise rraster`_`read = FALSE, .tif file output.  rvector`_`read = TRUE, outputs .gpkg (saved output`_`path) SpatVector (terra package) object,  otherwise rvector`_`read = FALSE (default), .tif file output","code":""},{"path":"/reference/merge_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"merge_tiles — merge_tiles","text":"","code":"merge_tiles(tile_path, output_path, rraster_read = TRUE, rvector_read = FALSE)"},{"path":"/reference/merge_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"merge_tiles — merge_tiles","text":"tile_path Path raster tile spatial vector output_path Path write output rraster_read TRUE merged raster .tif layer gets read R. TRUE set default rvector_read TRUE merged spatial vector gets read R. FALSE set default TRUE rraster_read needs set FALSE","code":""},{"path":"/reference/merge_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"merge_tiles — merge_tiles","text":".tif raster file spatial vector object","code":""},{"path":"/reference/read_geopackage.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a GeoPackage file — read_geopackage","title":"Read a GeoPackage file — read_geopackage","text":"Read Geopackage vector file disk either table (data.table), directed graph object (igraph), spatial dataframe (sf) SpatVect object (terra).","code":""},{"path":"/reference/read_geopackage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a GeoPackage file — read_geopackage","text":"","code":"read_geopackage(   filename,   type = NULL,   SQL_table = NULL,   dt = F,   g = F,   sf = F,   SpatVect = F )"},{"path":"/reference/read_geopackage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a GeoPackage file — read_geopackage","text":"filename Name GeoPackage file import, e.g. \"order_vect_segment_h00v00.gpkg\" type Either \"net\" importing network, \"catch\" sub-catchments. SQL_table Optional. Name specific data import GeoPackage. set automatically Hydrography90m data, needs specified data. dt TRUE, import GeoPackage data.table. g TRUE, import GeoPackage directed graph (igraph object). possible network. sf TRUE, import GeoPackage spatial dataframe (sf object). SpatVect TRUE, import GeoPackage SpatVecteor (terra object).","code":""},{"path":"/reference/reclass_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Reclassify raster values of a raster file — reclass_raster","title":"Reclassify raster values of a raster file — reclass_raster","text":"Reclassifies raster file based integer values according reclassification rules.","code":""},{"path":"/reference/reclass_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reclassify raster values of a raster file — reclass_raster","text":"","code":"reclass_raster(   rast_val,   recl_val,   rast_path,   recl_path,   recl_read = TRUE,   nodata = -9999,   type = \"Int32\",   compress = \"DEFLATE\",   quiet = TRUE )"},{"path":"/reference/reclass_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reclassify raster values of a raster file — reclass_raster","text":"rast_val Numeric vector current raster values. recl_val Numeric vector reclassification values . rast_path Full path raster .tif layer. recl_path Full path reclassified .tif layer = output file. recl_read TRUE reclassified raster .tif layer gets read R. TRUE set default. nodata Nodata value new .tif layer. default value -9999. type Data type; Options Byte, Int16, UInt16, Int32, UInt32, CInt16, CInt32; Int32 set default. compress Compression type: DEFLATE LZW; DEFLATE set default.","code":""},{"path":"/reference/segment_neighbours.html","id":null,"dir":"Reference","previous_headings":"","what":"Stream segment neighbours — segment_neighbours","title":"Stream segment neighbours — segment_neighbours","text":"segment, report segments connected one multiple input segments within specified neighbour order, option summarize attributes across segments.","code":""},{"path":"/reference/segment_neighbours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stream segment neighbours — segment_neighbours","text":"","code":"segment_neighbours(   g,   segmentID = NULL,   variable = NULL,   stat = NULL,   attach_only = F,   order = 5,   mode = \"in\",   n_cores = 1,   maxsize = 1500 )"},{"path":"/reference/segment_neighbours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stream segment neighbours — segment_neighbours","text":"g directed graph (igraph object). segmentID input segment IDs numerical vector search connected segments. variable Optional. One attribute(s) variable(s) input graph reported output segmentID (\"to_stream\"). stat One mean, median, min, max, sd (without quotes). Aggregates (summarizes) variables neighbourhood input segment (\"stream\", e.g., average land cover next five upstream segments sub-catchments). attach_only Logical. TRUE selected variables attached segment without aggregation. order neighbouring order. Order=1 immediate neighbours input segementID, order=2 order 1 plus immediate neighbours segementIDs order 1. mode One \"\", \"\", \"\". \"\" reports upstream neighbour segments, \"\" reports downstream segments, \"\" . n_cores Optional. Specify number CPUs internal parallelization case multiple stream segments / outlets. Defaults 1. case graph large, many segments used input, setting n_cores higher value can speed coputatation. comes however cost possible RAM limitations even slower processing since large data copied CPU. maxsize Optional. Specify maximum size data passed parallel backend MB. Defaults 1500 (1.5 GB). Consider higher value large study areas (one 20°x20° tile).","code":""},{"path":"/reference/segment_neighbours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stream segment neighbours — segment_neighbours","text":"function can also used create connectivity table Marxan using agg_var=\"length\" attach_only=TRUE. resulting table reports connectivity segment, along stream length connected segments.","code":""}]
